Purpose of this document
------------------------
This document has notes about all known irregularities that are currently in the
project: Compiler warnings, Xcode analyze issues, runtime messages printed to
the Xcode debug console, unfixed crash reports, etc.. This document complements
the issue list on the project's bug tracker.


Compiler warnings
-----------------
These compiler warnings are generated when some CocoaPods are built:
  The iOS deployment target is set to 6.0, but the range of supported deployment target versions for this platform is 8.0 to 12.1. (in target 'CocoaLumberjack')
  The iOS deployment target is set to 6.0, but the range of supported deployment target versions for this platform is 8.0 to 12.1. (in target 'GoogleUtilities')
  The iOS deployment target is set to 4.3, but the range of supported deployment target versions for this platform is 8.0 to 12.1. (in target 'nanopb')
  The iOS deployment target is set to 6.1, but the range of supported deployment target versions for this platform is 8.0 to 12.1. (in target 'ZipKit')
This occurs if the Xcode/base SDK version that is being used for the build no
longer supports the IPHONEOS_DEPLOYMENT_TARGET that is set for the CocoaPods
targets in question. This could result from a Podspec explicitly setting
IPHONEOS_DEPLOYMENT_TARGET, or from a Podspec using a platform that is lower
than the platform in Little Go's Podfile (which in turn leads to
IPHONEOS_DEPLOYMENT_TARGET being set). Little Go's Podfile contains a snippet
that should prevent this "minimum supported deployment target" compiler warning,
at the cost of generating other compiler warnings (see next section). If the
warning still occurs this means that the platform version in Little Go's
Podfile is outdated.


This compiler warning is generated when ZipKit is built:
  /Users/patrick/dev/littlego/Pods/ZipKit/ZipKit/ZKLFHeader.m:47:1: warning: implementing deprecated method [-Wdeprecated-implementations]
ZipKit implements the finalize method in the ZKLFHeader class, which is marked
deprecated in the system headers like this:
  - (void)finalize OBJC_DEPRECATED("Objective-C garbage collection is no longer supported");
The finalize method implementation looks like this:
  - (void) finalize {
    [self removeObservers];
    [super finalize];
  }
The "removeObservers" method unregisters KVO observers for various properties.
I am not using any such observers, the question remains: Is ZipKit using KVO
observers internally?

This compiler warning is generated when ZipKit is built:
  /Users/patrick/dev/littlego/Pods/ZipKit/ZipKit/ZKArchive.m:27:14: warning: 'getBytes:' is deprecated: first deprecated in iOS 8.0 - This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead. [-Wdeprecated-declarations]
This is merely a warning about a potential buffer overrun. I'm counting on
ZipKit using the getBytes: method correctly. If the IPHONEOS_DEPLOYMENT_TARGET
is raised to a value that makes these enumerators go away I may have to start
using a new zip library.

These compiler warnings are generated when ZipKit is built:
  /Users/patrick/dev/littlego/Pods/ZipKit/ZipKit/NSDate+ZKAdditions.m:25:23: warning: 'NSYearCalendarUnit' is deprecated: first deprecated in iOS 8.0 [-Wdeprecated-declarations]
  /Users/patrick/dev/littlego/Pods/ZipKit/ZipKit/NSDate+ZKAdditions.m:25:44: warning: 'NSMonthCalendarUnit' is deprecated: first deprecated in iOS 8.0 [-Wdeprecated-declarations]
  /Users/patrick/dev/littlego/Pods/ZipKit/ZipKit/NSDate+ZKAdditions.m:25:66: warning: 'NSDayCalendarUnit' is deprecated: first deprecated in iOS 8.0 [-Wdeprecated-declarations]
  /Users/patrick/dev/littlego/Pods/ZipKit/ZipKit/NSDate+ZKAdditions.m:26:5: warning: 'NSHourCalendarUnit' is deprecated: first deprecated in iOS 8.0 [-Wdeprecated-declarations]
  /Users/patrick/dev/littlego/Pods/ZipKit/ZipKit/NSDate+ZKAdditions.m:26:26: warning: 'NSMinuteCalendarUnit' is deprecated: first deprecated in iOS 8.0 [-Wdeprecated-declarations]
  /Users/patrick/dev/littlego/Pods/ZipKit/ZipKit/NSDate+ZKAdditions.m:26:49: warning: 'NSSecondCalendarUnit' is deprecated: first deprecated in iOS 8.0 [-Wdeprecated-declarations]
These are merely deprecation warnings about enumerators that will go away in
the future. If the IPHONEOS_DEPLOYMENT_TARGET is raised to a value that makes
these enumerators go away I may have to start using a new zip library.


Xcode analyze issues
--------------------
Xcode analyze finds two issues in the nanopb source code, both in the static
function initialize_pointer_field:
- Dereference of null pointer
- Null pointer passed as 1st argument to memory set function
I didn't analyze the caller sites of the function to see for myself whether
these are real issues, I am simply trusting that they are not because Google
protobuf is a heavily used and tested library that does not contain such null
pointer issues.


Runtime messages in the Xcode debub console
-------------------------------------------
This message occasionally appears in Xcode's debug console:
    2019-01-09 22:17:16.951254+0100 Little Go[17873:3109184] [Common] _BSMachError: port f23; (os/kern) invalid capability (0x14) "Unable to insert COPY_SEND"
I have not been able to find out what this means. One post that I saw claimed
that it had to do with old breakpoints set in Xcode, and that the message went
away after deleting all breakpoints. However, in my case I cannot confirm this,
I've seen the message at least once while not having set any breakpoints. This
was on a real device, but on previous occasions I'm pretty sure that I've also
seen the message in the simulator.


The following message appears in Xcode's debug console when the app is run in
the simulator of an older device:
  2018-12-13 03:32:16.838694+0100 Little Go[60892:7782851] libMobileGestalt MobileGestalt.c:890: MGIsDeviceOneOfType is not supported on this platform.
A knowledgeable answer on StackOverflow [1] explains that
  The messages we are seeing indicate incompatibilities between simulator
  versions and Xcode versions.
Verified that the message is printed somewhere between the main() function
executing the line
  return UIApplicationMain(argc, argv, nil, NSStringFromClass([ApplicationDelegate class]));
and the application delegate receiving the message
  application:didFinishLaunchingWithOptions:()
Experimentally determined which devices have the message and which one's don't:
- These devices do have the message: iPhone SE, iPhone 8 Plus, iPhone 8,
  iPhone 7 Plus, iPhone 7, iPhone 6s Plus, iPhone 6s, iPhone 6 Plus, iPhone 6,
  iPhone 5s, iPad Pro (12.9-inch) (2nd generation), iPad Pro (12.9-inch),
  iPad Pro (10.5-inch), iPad Pro (9.7-inch), iPad Air 2, iPad Air,
  iPad (6th generation), iPad (5th generation)
- These devices do not have the message: iPhone XS Max, iPhone XS, iPhone XR,
  iPhone X, iPhone 5, iPhone 4s, iPad Retina,
  iPad Pro (12.9-inch) (3rd generation), iPad Pro (11-inch), iPad Pro
[1] https://stackoverflow.com/a/52874178/1054378


These messages frequently appear in Xcode's debug console:
  2019-01-09 21:58:31.237175+0100 Little Go[63316:9128553] [MC] System group container for systemgroup.com.apple.configurationprofiles path is /Users/patrick/Library/Developer/CoreSimulator/Devices/12301FD1-7457-4768-A2CA-92D386D2FB76/data/Containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles
  2019-01-09 21:58:31.237793+0100 Little Go[63316:9128553] [MC] Reading from private effective user settings.
are generally accepted to be harmless and appear to related to the simulator
environment. I've seen these message only on some device/iOS combinations.


This message appears in Xcode's debug console when rotating the interface,
but only in iPad simulators, and then only in those with iOS 10.3.1 and 11.4:
  [App] if we're in the real pre-commit handler we can't actually add any new fences due to CA restriction
The message is generally accepted to be harmless. [1] seems to be the most
knowledgable post on the net. Apparently several radars were filed, which seem
to have taken effect because the message no longer appears in iOS 12.1
simulators. The message also does not appear in iOS 9.3 and older simulators.
[1] https://stackoverflow.com/a/38860899/1054378


This messages sometimes appears in Xcode's debug console:
  objc[9632]: Class _NSZombie_FBSXPCMessage is implemented in both ?? (0x600000840630) and ?? (0x600000817ba0). One of the two will be used. Which one is undefined.
The message appears when the app is launched, if at all. Although I understand
the problem that the message indicates, I have been unable to find out its
source. Since Zombie Objects are enabled only in the Xcode scheme for debug
builds, and not the in the Xcode schemes for AdHoc or AppStore distribution, the
problem can be safely ignored for the moment.


These are harmless informational messages related to Firebase/Crashlytics
that appear in Xcode's debug console when the app launches:
  2019-01-09 22:13:38.202260+0100 Little Go[17873:3109184] [Crashlytics] Version 3.12.0 (136)


These are additional Firebase/Crashlytics messages which can be ignored. The
Gyro message appears only on a real device. The other message seem to be
network-related.
  2019-01-09 22:13:39.671815+0100 Little Go[17873:3109305] [Gyro] Manually set gyro-interrupt-calibration to 200
  2019-01-09 22:13:39.818298+0100 Little Go[17873:3109275] [BoringSSL] nw_protocol_boringssl_get_output_frames(1301) [C1.1:2][0x147e466d0] get output frames failed, state 8196
  2019-01-09 22:13:39.819228+0100 Little Go[17873:3109275] [BoringSSL] nw_protocol_boringssl_get_output_frames(1301) [C1.1:2][0x147e466d0] get output frames failed, state 8196
  2019-01-09 22:13:39.821358+0100 Little Go[17873:3109275] TIC Read Status [1:0x0]: 1:57
  2019-01-09 22:13:39.822132+0100 Little Go[17873:3109275] TIC Read Status [1:0x0]: 1:57


This message appears when the "More game actions" alert controller is displayed
on most devices and iOS versions (12, 13, 14):
  2021-01-31 20:16:30.830921+0100 Little Go[12075:361501] [LayoutConstraints] Unable to simultaneously satisfy constraints.
I have been unable to find the cause for the problem even after extensive
debugging of the view hierarchy generated by UIAlertController.


Crash reports
-------------
For version 1.3.1 there were 3 exotic-looking crashes in the Crashlytics
dashboard. The stack trace of those crash reports does not show any direct
relation to the app's code. I don't have the time nor the knowledge to
investigate them.

For version 1.3.1, in Xcode under "Organizer > Crashes" there were quite a large
number of crashes. The cause for most of them is "High CPU Usage", e.g. this:
  144 seconds cpu time over 19 seconds
I attempted to reproduce this on a device by configuring a GTP engine profile
with the maximum number of 8 threads and the maximum thinking time of 120
seconds. After more than 15 minutes of calculations at full throttle there were
no signs of any problems. Tested while Instruments was attached to the session.
Since I currently don't know how to reproduce the crashes, I also can't provide
sensible counter-measures.


Minor bugs
----------
Minor bugs currently considered not to be worth to be recorded on the GitHub
issue tracker.

- Possibly only on iPad: Hold the device in Landscape. Make sure a board
  position is selected in the board position table view (table view cell has
  orange background color). Switch to another app for a few seconds. Switch
  back. The table view cell is no longer selected. Tried to fix this by
  setting the cell's "selected" and "highlighted" properties to YES, but didn't
  work.

