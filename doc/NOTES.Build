Purpose of this document
------------------------
This document has notes about the project's build process. The file
NOTES.Build.3rdparty has additional notes about building the 3rdparty software
used by the project.


Xcode version
-------------
Since version 1.6.0, the current build should work out of the box for

  Intel Mac
  Xcode 13.2.1
  iOS base SDK 15.2

If you want to build with a different setup you will probably encounter errors.
The most important thing to keep in mind is that the Xcode project's base SDK
and deployment target versions must match the versions you have in your
script/build-env.sh file, and that the Xcode deployment target must match the
deployment target in the Podfile. Since version 1.6.0 the base SDK version in
build-env.sh is found automatically, so in effect you should only need to make
changes to files if you change the deployment target.

If your setup is newer, the build may or may not work, depending on how much
Apple changed the compiler toolchain inside Xcode. Also if you're using a Mac
with a different processor architecture than the one listed above, then all
sorts of linker errors may occur. If the build does not work, you are on your
own to resolve the problem.

If your setup is older and the build does not work, you may find a solution by
looking at older versions of the build files in the Git repository. Here is a
list of configurations that have worked in the past:
- Xcode 3.?, iOS base SDK 4.2, available between 0.1 and 0.5
- Xcode 4.2, iOS base SDK 5.0, available between 0.6 and 0.7.x
- Xcode 4.3, iOS base SDK 5.1, available between 0.8.x and 0.9.x
- Xcode 4.5, iOS base SDK 6.0, available only for a short time during
  development of 0.10.0; the configuration can be found in commit
  2038191682762f8bd815b5ec8580b2d75fcea7f4
- Xcode 4.6, iOS base SDK 6.1, available between 0.10.x and 0.12.x
- Xcode 5.0.2, iOS base SDK 6.1, available in 1.0.x
- Xcode 5.1.1, iOS base SDK 7.1, available in 1.1.x
- Xcode 6.1.1, iOS base SDK 8.1, available in 1.2.x
- Xcode 7.3.1, iOS base SDK 9.3, available in 1.3.x
- Xcode 10.1, iOS base SDK 12.1, available in 1.4.x and 1.5.x
- Xcode 12.3, iOS base SDK 14.3, available in 1.6.x


Device builds
-------------
If you want to create a build that runs on an actual iOS device, the following
additional requirements apply:

- You must provide code signing identities and provisioning profiles on the
  machine where the build takes place. If you haven't got an Apple developer
  account, now is the time to create one. If you're new to this then it might
  be best to take your first steps with a simple "Hello world" app instead of
  with this project.
- The project is set to let Xcode automatically manage code signing. The only
  thing you should have to do is to change the development team so that it
  references YOUR account. See the section
  "Code signing and provisioning profiles" below for details.
- You must create the following files in the project's 'root folder:
    GoogleService-Info.plist
  These are required for setting up Crashlytics, the crash reporting service
  used in this project. If you haven't got accounts with Firebase yet, now is
  the time to create them. Once you have your accounts, do this:
  - In the Firebase web interface create a project. During the project setup
    wizard you have to enter a few pieces of information which will result
    in a Firebase configuration file GoogleService-Info.plist being made
    available. Download the file and place the local copy in the project's root
    folder.


Build configurations
--------------------
This project defines 4 build configurations:
- Debug configuration: For non-optimized developer builds that can be debugged
  in the simulator or on a device that is directly attached to the development
  machine.
- Release configuration: For production builds that can be tested in the
  simulator or on a device that is directly attached to the development machine.
  This is also the configuration to use for profiling with Instruments on a
  device.
- Distribute_AdHoc configuration: For production builds that can be tested on
  a device, but the device is not attached to the development machine. App
  distribution happens over the AdHoc distribution channel. This is the
  configuration to use when distributing builds to beta testers.
- Distribute_AppStore configuration: For final production builds that are
  submitted to Apple, for distribution via the App Store.

IMPORTANT: The build settings for the Distribute_AdHoc and Distribute_AppStore
configurations are almost identical to the build settings for the Release
configuration. The only differences are the provisioning profile and the code
signing identities, because of the different distribution channels. Whenever a
change is made to one of the three configurations, the other two configurations
must be kept in sync!


Code signing and provisioning profiles
--------------------------------------
Over time the way how code signing and provisioning profiles are managed have
changed several times for this project. Older policies can be found by looking
at the history of this document in version control.

Code signing and provisioning profiles are relevant only for device builds.
They can be ignored for simulator builds.

Provisioning style
- The project is set to let Xcode automatically manage code signing.
- In "Little\ Go.xcodeproj/project.pbxproj" this can be seen by searching for
  the "ProvisioningStyle" project setting:
    ProvisioningStyle = Automatic;
- The "ProvisioningStyle" project setting is configured per target.
- In the Xcode UI the setting is found on the "General" tab when you select a
  target, not in the "Build Settings" tab where one might expect it.
- Only the "Little Go" target is set up with automatically managed code signing.

Development team
- In addition to the "ProvisioningStyle" project setting the target is also
  configured with a development team project setting.
- This is the only thing that needs to be changed when a clone of the project
  is created.
- In "Little\ Go.xcodeproj/project.pbxproj" this can be seen by searching for
  the "DevelopmentTeam" project setting:
    DevelopmentTeam = P7NZKNP5L2;
- In the Xcode UI the setting is found, again, on the "General" tab, alongside
  the "ProvisioningStyle" setting.
- Don't confuse this project setting with the build setting "DEVELOPMENT_TEAM".
  The build setting must remain unset.

Code signing identity
- The build setting "CODE_SIGN_IDENTITY" is set to the generic code signing
  identy named "iPhone Developer".
- Xcode is managing public/private keypairs and the accompanying certificates
  under this name, so as long as Xcode is allowed to automatically manage code
  signing this build setting never needs to be changed.
- Both a development and a distribution certificate for code signing must be
  present on the machine where the build is taking place. As mentioned, Xcode
  automatically manages these. You can view the certificates by going to
    Preferences > Accounts > Manage Certificates
  On this screen, if necessary you can create new certificates or renew
  existing ones.

Provisioning profile
- The build setting "PROVISIONING_PROFILE" can remain empty because Xcode is
  automatically managing code signing.
- Provisioning profiles must be present on the machine where the build is taking
  place. It is not entirely clear how Xcode (or xcodebuild) looks up
  provisioning profiles, but one possibility is that they must be present in a
  certain location (~/Library/MobileDevice/Provisioning Profiles). Another is
  that they are found via Spotlight (mdfind).


Xcode build system configuration
--------------------------------
Important configuration settings in Xcode (both for the "Little Go" and the
"Unit tests" targets):
- IPHONEOS_DEPLOYMENT_TARGET = 9.0
  - This must match the deployment target in script/build-env.sh and in Podfile.
- FRAMEWORK_SEARCH_PATHS = "$(SRCROOT)/3rdparty/install"
  - This is required to find the Fuego, Boost, SgfcKit and libsgfc++ frameworks.
  - Note that FRAMEWORK_SEARCH_PATHS serves both for header file inclusion and
    library linking. Traditional C/C++ has two separate settings for these:
    HEADER_SEARCH_PATHS and LIBRARY_SEARCH_PATHS.
- CLANG_ENABLE_MODULES = YES
  This is enabled project-wide so that #import statements for system frameworks
  automatically result in the respective framework being linked against. As a
  result there are far less entries in the "Link Binary with Libraries" build
  phase.
- GCC_PREPROCESSOR_DEFINITIONS = NDEBUG,LITTLEGO_NDEBUG (Release and Distribute_* configurations)
  GCC_PREPROCESSOR_DEFINITIONS = NDEBUG                 (Debug configuration)
  Note: The NDEBUG macro is required even for a debug build because the project
  links against a release build of Fuego. Because of this NDEBUG becomes useless
  for distinguishing between debug/release builds, so we need our own project
  specific macro, in this case named LITTLEGO_NDEBUG.
- The "Little Go" target has a "Run Script" build phase that automatically
  uploads dSYM files to Crashlytics when an App Store build is made. The
  Firebase configuration file GoogleService-Info.plist that is required to
  perform this upload is ***NOT*** part of the public source code - if you
  forked the project to create your own App Store build then you must register
  a Firebase account and get your own Firebase configuration file.

Configuration settings for the "Unit tests" target
- All tests in this target are what Apple used to call "logic tests", i.e. unit
  tests that exercise more or less isolated classes. The test source code is
  built using the iOS Simulator SDK, and tests can be run within the simulator
  only, i.e. not on a real iOS device, and also not outside of the simulator
  (the latter differs from Xcode 4.x where it was possible to run tests without
  launching the simulator)
- All source code files that are unit tested must be added to the "Unit tests"
  target so that they are built for that target.
- The build setting "Header Search Path" is set to the value "./src". Since the
  test sources are completely separated from the normal application sources, I
  don't want to deal with relative path issues for each #import statement. The
  application can be seen as third party software from the point of view of the
  unit test bundle.
- Because application source files depend on the presence of a prefix header,
  the "Unit tests" target has to have the same "Prefix header" build settings
  as the main application target.
- Compiling ApplicationDelegate pulls in Fuego/Boost (via GTP classes)
  as dependencies. To prevent this, the "Unit tests" target defines the
  preprocessor macro LITTLEGO_UNITTESTS. The effect is that certain #include
  statements and pieces of code are not compiled and the dependency on
  Fuego/Boost goes away.
- Compiling ApplicationDelegate also pulls in Firebase and Crashlytics as
  dependencies. For the unit test target this results either in a linker error
  because of undefined symbols (if the unit test target does not link against
  the third party frameworks), or in a linker error because of duplicate symbols
  (if the unit test target *does* link against the third party frameworks; the
  duplication of symbols probably occurs because the unit test target links
  against the main bundle, which already contains the third party framework
  symbols). Since crash reporting is not required for unit tests, the simplest
  way to work around these issues was to let the code in the main bundle that
  works with Firebase and Crashlytics not compile when the preprocessor
  macro LITTLEGO_UNITTESTS is defined. The dependency on Firebase and
  Crashlytics thus goes away, in exactly the same way as the dependency on
  Fuego/Boost.

Configuration settings for the "UI tests" target
- All tests in this target are what Apple used to call "user interface tests"
- These tests do not interface with the app code at all, except for making use
  of some enumerations, constants and utility classes, so the vast majority of
  the regular application source code files do not need to be built for the
  "UI tests" target and therefore must not be added to the "UI tests" target.
- Because UI test code makes use of enumerations and accessibility identifiers
  defined in Constants.h, the "UI tests" target has the same "Prefix header"
  build settings as the main application target.
- Compiling Prefix.pch and Constants.m pulls in various third party library
  headers and types that are not available because the "UI tests" target build
  settings do not define any compiler search paths for finding those headers.
  To prevent this, the "UI tests" target defines the preprocessor macro
  LITTLEGO_UITESTS. The effect is that certain #include statements and pieces of
  code are not compiled and the dependency on third party libraries goes away.
- The "UI tests" target is built with ARC enabled, but regular application
  source code is still written for manual memory management. This means that
  those few regular application source code files that ***ARE*** built for the
  "Unit tests" target need to be built with the -fno-objc-arc compiler flag.
  File-specific compiler flags can be specified like this:
  - Select the main project in the standard editor on the left hand side of the
    Xcode UI
  - On the next screen select the "UI tests" target
  - Select the tab "Build phases"
  - In the "Compile Sources" build phase the files are listed that are built
    for the currently selected target
  - The table has a "Compiler flags" column where you can enter file-specific
    compiler flags.


Xcode schemes
-------------
Little Go's Xcode build schemes are stored in source control along with the
Xcode project itself. [1] has the answer how to achieve this. The following is
a short overview of how I configured those schemes:
- Let Xcode autocreate schemes. This results in one scheme for each of the
  project's targets.
- Remove the "Unit tests" scheme
- Rename the "Little Go" scheme to "Little Go Debug"
- Add the unit test and UI test targets to the "Little Go Debug" scheme
- Enable the "Run" action for the unit test and UI test targets.
- Make sure that the checkbox "Test" is checked only for the unit test and
  UI test targets, but not for the main target. This allows to run the test
  action (Command + U) for the main target.
- Make sure that the "Profile" and "Archive" actions use the "Release" build
  configuration, and all other actions use the "Debug" build configuration
- Disable the "Archive" action
- Duplicate the "Little Go Debug" scheme, naming the new scheme "Little Go AdHoc
  Distribution". Enable the "Archive" command. Change all actions to use the
  "Distribute_AdHoc" build configuration.
- Ditto, but name the new scheme "Little Go AppStore Distribution" and let the
  actions use the "Distribute_AppStore" build configuration.

[1] https://stackoverflow.com/questions/7144316/adding-xcode-workspace-schemes-to-version-control


Platform notes
--------------
- The Xcode project is prepared to build Little Go both for iOS and for the
  iPhone Simulator.
- The base SDK is "Latest" so that a simple rebuild is sufficient after an
  Xcode upgrade.
- The deployment target is set to 9.0 so that the application keeps running on
  iOS 9.0 devices.


Upgrading the iOS SDK
---------------------
A few rough notes on what needs to be done when a new iOS SDK is installed on
the development machine:
- Delete (or backup) the 3rdparty folder
- In Terminal.app, run script/build-3rdparty-software.sh to perform a full
  rebuild of all 3rdparty software packages
- If you haven't restarted Xcode, it might be a good idea to do so now
- In the Xcode project, rebuild the "Little Go" target


Xcode/iOS compatibility issue when running a build on the device
----------------------------------------------------------------
Given the device build was done correctly (see "Device builds" further up in
this document) you should be able to just run the build from Xcode. One
obstacle you may encounter, however, is that Xcode refuses to run the build
because it somehow cannot cope with a newer iOS version that is installed on
the device. The error message is this:

  Failed to prepare device for development.

  This operation can fail if the version of the OS on the device is incompatible
  with the installed version of Xcode. You may also need to restart your mac and
  device in order to correctly detect compatibility.

If this error persists even after reconnecting the device to your mac, then the
only fix for this problem that I know of is by manually downloading/installing
an Xcode Developer Disk Image. The GitHub project I use as a source for such
disk images is [1].

1. Download the disk image .zip file that matches the iOS version on the device.
2. Go to your XCode app in the Application folder & open its content.
3. Locate the "DeviceSupport" folder of the appropriate platform.
   Example path: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport
4. Copy the content of the disk image .zip file into the "DeviceSupport" folder.
5. Restart Xcode.

When you now try again to run the build Xcode should display this message for
a few moments:

  Planes Objekt is busy: Fetching debug symbols for Planes Objekt

After that the build should run just fine.

Note: I encountered this problem for the first time with Xcode 13.2.1 and the
device having installing iOS 15.4.

[1] https://github.com/mspvirajpatel/Xcode_Developer_Disk_Images


Profiling on Intel Mac for simulator build
------------------------------------------
Environment:
- Intel Mac
- Xcode 13.2.1
- Selected target is any simulator

When selecting "Product > Profile" in Xcode then the build fails with this error
message:

  ld: in /path/to/littlego/3rdparty/install/boost.framework/boost(greg_month.o), building for iOS Simulator, but linking in object file built for iOS, file '/path/to/littlego/3rdparty/install/boost.framework/boost' for architecture arm64

Looking at the line that triggers this build error in Xcode's issue navigator,
it can be seen that it is a linker command that includes this option:

  -target arm64-apple-ios9.0-simulator

Obviously this target is wrong - on an Intel Mac, the simulator does not yet
use an ARM architecture. The workaround for this is to temporarily exclude the
architecture "arm64" from the Release configuration build. The initial hint that
this could be a solution was found in [1]. Some notes:
- The exclusion must be done for the Release configuration, not the Debug
  configuration, because Xcode automatically selects the Release configuration
  for profiling.
- The workaround must be done locally and temporarily, because the change to the
  build settings must not be added to version control so that there will be no
  problems when the supported development environment eventually switches to
  Silicon Macs.

How to make the change:

- Quit Xcode.
- Use a text editor to open the Xcode project file (project.pbxproj).
- Look for the XCBuildConfiguration section that contains the settings for the
  Release build configuration.
- Add this line
      "EXCLUDED_ARCHS[sdk=iphonesimulator*]" = "arm64";
- Save and close the text editor, then launch Xcode.

The change must be done manually in a text editor because Xcode since version 12
no longer exposes EXCLUDED_ARCHS in the UI, so it can't be added via the Xcode
UI. Once the setting exists in the project file, however, Xcode will display
the setting and let you edit (or delete) it directly in the Xcode UI.

Note that you can also profile a Debug build on the simulator: Run the build,
then in the Debug navigator select one of the categories that you're interested
in (CPU, Memory, Disk, Network). You should now see a button
"Profile in Instruments" - click this to start a profiling session. Instruments
will even offer to restart the app so that you can profile from the very
beginning.

[1] https://stackoverflow.com/q/63607158/1054378
