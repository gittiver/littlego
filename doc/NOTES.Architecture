Purpose of this document
------------------------
This document contains architecture notes on a variety of subjects.


Memory management
-----------------
This project uses manual reference counting using retain/release, i.e. no ARC.
An exception is the source code built for the "UI tests" target, which uses ARC.


Communication with Fuego
------------------------
- How it normally works: On PC platforms this is done by running Fuego in a
  separate process and then attaching an output and an input stream to that
  process' stdin and stdout.
- The problem: iOS does not allow to launch other processes, therefore a
  different solution is required
- The solution: What works very nicely is to run the Fuego engine in a
  secondary thread and to let it attach its input/output streams to a pair of
  in-memory pipe streams. The Fuego client also runs in a secondary thread and
  attaches two complementary streams to the same pair of in-memory pipe streams.
  Synchronization between the two threads is achieved through the pipe streams'
  blocking behaviour.
- Fuego had to be patched to make this happen. For details, read the section
  "Changes to the Fuego source code".
- The in-memory pipe streams are made possible by the PipeStreamBuffer class,
  which is part of this project. PipeStreamBuffer is a custom I/O stream buffer
  that allows std::istream and std::ostream to act as the input and output end
  points of an in-memory pipe.
- An earlier, much simpler implementation without the need of a custom I/O
  stream buffer made use of named pipes, but this had to be abandoned when the
  project switched to the C++ standard library implementation libc++, due to a
  bug in that library. See [1] for details.
  [1] https://bugs.llvm.org/show_bug.cgi?id=23078


Thread architecture
-------------------
- Main thread: Reacts to user input; submits commands to the command executor
  and the GTP client; is notified asynchronously by the GTP client after a
  command has been processed; updates the GUI with information obtained from
  the response to the command.
- Command executor secondary thread: Executes instances of Command (see that
  protocol's documentation for details) and optionally feeds progress updates
  it receives from the Command into an MBProgressHUD. This secondary thread is
  implemented by the class CommandProcessor. The thread is created when the
  first asynchronous command is submitted, and remains alive until the
  application shuts down.
- GTP client secondary thread: Reacts to commands submitted by the main
  thread; sends the commands to the GTP engine via output stream which is
  attached to an in-memory pipe stream IMPS1; wakes up when it receives the
  response from the GTP engine via input stream which is attached to another
  in-memory pipe stream IMPS2; notifies the main thread of the response.
- GTP engine secondary thread: Reacts to commands received from the GTP
  client via input stream which is attached to in-memory pipe stream IMPS1;
  processes the command, then sends the response back to the GTP client via
  output stream which is attached to an in-memory pipe stream IMPS2.
- Communication between main thread and GTP client secondary thread happens
  entirely within the GtpClient class; synchronization occurs with the help
  of the NSObject method performSelector:onThread:withObject:waitUntilDone:().
- Communication between GTP client and GTP engine secondary threads is routed
  through in-memory pipe streams; synchronization occurs via the pipe streams'
  blocking behaviour.
- Because of input/output streams' blocking reads and writes, communication
  between GTP client and GTP engine is essentially synchronous. As a
  consequence, the main thread will be blocked if it wants to submit a command
  to the GTP client while the client is still waiting for the response to a
  previous command. For this reason, all GUI elements that trigger a GTP command
  should be disabled while a command is being processed.
- Read the GtpClient class documentation for details about how GtpClient
  notifies clients of command submission and response receipt.


Multithreading vs. UI updates
-----------------------------
CommandProcessor supports execution of commands in a secondary thread so that
a progress view can be displayed for long-running actions. Notable long-running
actions are
- Application startup
- Load a game from the archive
- Navigate between board positions

Clients often need to react to events that occur during a long-running action.
Such events are usually communicated via notifications, but a client may also
use KVO to observe a model for property value changes. Regardless of the way how
a client is notified, the notification happens in the CommandProcessor secondary
thread context. It is, however, the client's responsibility to make sure that
any UI updates happen in the main thread. This is required because UIKit is
generally not thread-safe.

A common way how clients achieve this is by listening to the notifications
longRunningActionStarts and longRunningActionEnds, which are posted when a
long-running action begins and ends. While the long-running action is still in
progress, a client queues up any UI updates. Then, when the action ends, the
client performs all queued UI updates in a row. This works well because
longRunningActionEnds is guaranteed to be delivered in the main thread context.

For additional details see the LongRunningActionCounter class.


GTP command sequence
--------------------
Even though responses for GTP commands are received asynchronously, the commands
themselves are processed in the order that they are submitted. This means that
any number of GTP commands can be submitted as fast as possible (i.e. without
having to wait for the response), as long as

1) The submitter does not need the result of the command
2) A later command does not need the GTP engine to be in a particular state


Application states and transitions
----------------------------------
[1] has a very nice flowchart that shows the general flow of application state
transitions. Little Go does nothing out of the ordinary, the two classes that
are interesting to study are ApplicationDelegate and ApplicationStateManager.

[1] https://www.cocoanetics.com/2010/07/understanding-ios-4-backgrounding-and-delegate-messaging/


Preferences
-----------
The iOS Application Programming Guide says that "The Settings bundle is
generally the preferred mechanism for displaying preferences", then goes into
details about how to use such a Settings bundle. I don't like to separate the
UI for application preferences from the application, though, and therefore
chose to implement a dedicated Preferences view inside the application.


About the Play UI area
----------------------
- The Play UI area is the centerpiece of the entire application. It has a large
  number of UI elements, many of them interacting with each other, and some of
  them are not visible all the time. To reduce complexity and keep the Play UI
  area in its entirety in a maintainable state, it is paramount to have many
  small model and controller classes with clearly assigned responsibilities.
- Static design: PlayRootViewController is the UI area's root view controller.
  There are several subclasses, one for each distinct UI type-specific view
  hierarchy. With a few exceptions, the view hierarchy is represented by a
  corresponding hierarchy of container/child UIViewControllers. Not all
  controller classes are view controllers, though: There are also a number of
  controllers that manage gesture recognizing, animations and alert messages.
- Dynamic design: When the application launches, the main application view
  controller creates an instance of the appropriate PlayRootViewController
  subclass. This starts a first cascade of object creation during which all the
  controller objects are created and the delegate connections are made. A little
  bit later iOS accesses for the first time the view of the root
  PlayRootViewController. This triggers a second cascade of object creation
  during which all the view objects are created and notification and KVO
  observing mechanisms are initialized.
- View sizing and layouting is done via Auto Layout. Once you get over the
  initial stumbling blocks, Auto Layout in general is much easier to understand
  and less error prone than manually calculating view frames.


UI design
---------
As noted in "About the Play UI area", the Play UI area has a large number of UI
elements, and these must somehow be fitted into the small screeen estate
available on the iPhone. Here I try to outline the thoughts that went into the
iPhone portrait UI design. Some of the notes do not apply to the iPad UI design
and the iPhone landscape UI design.
- The Go board view
  - The Go board view has the following purposes: 1) Accurately represent
    board positions (in a game that is actively being played, the current game
    state is just a special board position). 2) Provide user interaction so
    that the user can place a stone. 3) Display scoring information (territory
    markup, dead stones, etc.). 4) Provide user interaction so that the user
    can mark dead stones during scoring. 5) Provide user interaction so that
    the user can setup the board before the first move is played. 6) Provide
    user interaction so that the user can edit markup.
  - Because the Go board is square, but iOS device screens are rectangular, the
    game view cannot take full advantage of all the available screen estate.
    The game view is responsible for making the most of the current situation,
    dynamically adjusting to any changes such as device orientation changes.
  - User preferences modify view appearance (e.g. display labels) and user
    interaction behaviour.
- The navigation bar
  - Navigation bar space is limited, therefore the only buttons that are
    displayed are those that are actually enabled (e.g. while the computer is
    thinking most actions are not allowed, so the only button that is
    displayed is the one that interrupts the computer's thinking). The result
    is a "nervous" UI, i.e. toolbar buttons are constantly being shown and
    hidden. I have not yet come up with a UI design that is more "calm".
  - At the right-most position there is a "Game Actions" button which provides
    access to a menu with additional actions that are not used very
    often. Only actions related to games as a whole are to be displayed by
    this menu.
  - At the second-to-right-most position there is a "Game Info" button that
    provides access to a screen with detailed information about the current
    game.
  - The "Game Actions" and "Game Info" buttons remain visible at all times to
    mitigate the "nervous" UI effect described above.
  - Most toolbar items do not use the iOS provided icons available from
    UIBarButtonItem. The reason is that, although the icons' visual appearance
    might seem appropriate, their semantic meaning is not!
- The status view
  - A status view is used to display information about the current game state
    to the user, or a hint about the most likely action that the user may want
    to take next (e.g. "tap to mark dead stones" in scoring mode, or
    "tap to place or remove a symbol" in markup editing mode).
  - The status view currently is situated in the center of the navigation bar.
    Previous versions of the app had the status view situated in a single line
    below the board view, but this was redesigned because it took away some of
    the already precious space from the board view.
- The activity indicator
  - An activity indicator is needed to let the user know when the Go engine
    is busy so that he knows why some UI elements are disabled.
  - Currently the indicator is located in the navigation bar, next to the
    status view. Although there is not a lot of space in the navigation bar,
    this works surprisingly well, because whenever the activity indicator
    becomes visible it trades space with one or more other buttons that become
    hidden in its stead.
- The board position collection view
  - This is a scrollable view that lists all the board positions. Scrolling is
    vital because the navigation buttons (see next section) to go back/forward
    one board position make it hard to access board positions that are far away
    from the current board position.
  - The view is designed to take up only minimal vertical space, because
    vertical space is desperately needed for other views.
  - Because a board position contains quite a lot of information and not much
    vertical space is available, as a tradeoff a cell in the collection must be
    relatively wide. There is no way around this, although it results in only
    about 2-3 cells being visible at the same time.
  - The core of a board position is the move that was played to arrive at that
    position, so the cell shows move information very prominently. If there is
    more information associated with the board position than just a move, the
    cell displays a few additional small icons that serve as indicators that
    "there is more". Notably, an icon to indicate that there is annotation data
    and an icon to indicate that there is markup data.
- Buttons to navigate between board positions
  - Buttons to jump back/forward one position are used to navigate short
    distances
  - Buttons to jump to the beginning/end of the game are used to navigate far
    distances
  - Previous versions of the app also had buttons to jump back/forward 10
    positions; these 2 buttons were eliminated because with the update to iOS 7
    I needed new icons with a flat look, and I was unable to find a set of 6
    distinct looking icons; all the icons that I experimented with resulted in
    an ugly-looking, jumbled mass of arrows :-(
- The annotation view
  - Vertically stacking the 4 board position navigation buttons in a 2x2 grid
    makes enough space available besides the button grid for displaying
    annotations information.
  - There is not enough space to display all the information, so the annotation
    view uses paging to distribute the information across two pages.


Exceptions
----------
Exceptions should not be used in Cocoa or iOS applications in the same liberal
way as someone coming from Java or C++ might expect (see [1]).

In this project, exceptions are occasionally raised, in situations where
something weird and totally unexpected happened. Most of the time this indicates
a programming error of some sort which should be fixed immediately. Instead of
trying to recover from these weird and totally unexpected situations, the policy
is to fail early. The drawback is that end users will see a crash if an
exception-triggering bug makes it into production. This is a price I am willing
to pay, also there is now a crash reporting service in place which vastly
improves chances that I get notified about the problem.

[1] https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Exceptions/Exceptions.html


Strategy for saving data / preventing data loss
-----------------------------------------------
A simplistic strategy is to save data when the application is suspended
(applicationDidEnterBackground), and to restore the data after the application
did launch (application:didFinishLaunchingWithOptions:()). Although it is
basically sound, this strategy has one severe weakness: It assumes that the
application never crashes!

Little Go uses a strategy that is more elaborate, but in order to do so it
distinguishes between two types of data that need to be saved:
- The game in progress. The game's moves and any other data associated with the
  game (e.g. annotations, markup) are the user's most precious data, so the
  application tries very hard to never lose this data.
- Application state and user preferences: This data is slightly less important.
  The user would certainly be annoyed if she lost some of this data, but it
  would not be a total disaster. Accordingly, the application tries a little bit
  less hard to not lose this data.

So how does the strategy work in detail?
- The game in progress is saved immediately every time a move is played or
  discarded, or any other data associated with the game (e.g. annotations,
  markup) is changed. Data from the previous backup operation is overwritten.
  This gives maximum protection against crashes (assuming that there is no crash
  during the game-saving routine itself), for the price of additional file
  activity (i.e. flash drive write cycles) and processing power.
- User preferences: This data is saved only when the user switches tabs, or when
  the application is suspended for any reason.
- Other application state (e.g. the board position that the user currently
  views): This data is saved only when the application is suspended for any
  reason.

Storage formats
- User preferences data is written to disk by model objects which hold the data
  (e.g. BoardViewModel), with the help of NSUserDefaults. The concrete storage
  format is opaque, but can be assumed to be a key/value based .plist file.
- The game in progress and other application state is written to disk by
  SaveApplicationStateCommand. The data is saved as a binary file, the format
  is an NSCoding archive that represents the in-memory objects of GoGame and its
  associated object cluster.
- The game in progress is written to disk by SaveSgfCommand. The data is saved
  as an .sgf text file in the SGF format. This serves as a fallback mechanism
  in case restoring the NSCoding archive fails for any reason.

Responsibilities
- Tab switches are detected by MainTabBarController. It (indirectly) triggers
  the writing of user preferences in the ApplicationDelegate method
  writeUserDefaults(), which in turn instructs the individual model objects
  to save their user preferences data.
- SaveApplicationStateCommand is executed by ApplicationStateManager. It does
  this on two occasions:
  - When its applicationDidEnterBackground() method is invoked. This is
    triggered by ApplicationDelegate when the system informs the delegate that
    the application has entered the background and is about to be suspended.
  - When its commitSavePoint() method is invoked. This method must be actively
    invoked by commands and other agents when they perform operations that MAY
    cause important changes to the game in progress and other application state.
- ApplicationStateManager only executes SaveApplicationStateCommand when it was
  informed about actual application state changes by invoking its
  applicationStateDidChange() method. This method is actively invoked by
  commands and other agents that perform the actual application state changes.
- Very important: Commands/agents that invoke applicationStateDidChange() are
  not necessarily the same commands/agents that also invoke commitSavePoint().
  - There may be commands/agents that just know that they changed some state
    (they invoke applicationStateDidChange()) but they don't consider it
    important enough to immediately save it (they do not invoke
    commitSavePoint()). There are relatively few cases of this, typically when
    it is about state that is stored in the object cluster associated with
    GoGame but that does not belong to the actual game in progress and is not
    stored in an .sgf file. Notable examples:
    - The board position that the user currently views. See
      ChangeBoardPositionCommand.
    - Scoring information. See ChangeUIAreaPlayModeCommand and the
      GameActionManager method goScoreCalculationEnds.
  - Conversely there may be commands/agents that know that an operation they
    perform MAY have caused some change (they invoke commitSavePoint() to be on
    the safe side), but they do not perform the change themselves (they do not
    invoke applicationStateDidChange()). There is currently no example for this
    scenario.
- SaveSgfCommand is executed by SaveGameCommand, which is a command triggered by
  the user and is not further discussed here, and BackupGameToSgfCommand, which
  is the command that is interesting for the current discussion.
  - BackupGameToSgfCommand must be actively executed by commands and other
    agents.
  - In general most commands/agents that invoke the ApplicationStateManager
    method commitSavePoint() also execute BackupGameToSgfCommand.
  - The exception are commands/agents that perform changes to the game in
    progress for which there is no reprentation in the SGF format. Notable
    examples:
    - Changing game state to "ended" and resuming play after the game has ended.
      See ResumePlayCommand.
    - Switching the side that will play next from Black to White, or vice versa.
      See the MoreGameActionsController method switchNextMoveColor.
- Note that setting the GoGameDocument dirty flag only contributes to the user
  being prompted about having unsaved changes in the game. The flag does not
  participate in any of the backup mechanisms discussed above.

The documentation of class ApplicationStateManager has additional technical
details which may be interesting to read.
