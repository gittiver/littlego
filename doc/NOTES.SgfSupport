Purpose of this document
------------------------
This document has notes about the project's support for the SGF file format.
Generic SGF properties that are common to all games are documented in [1].
Properties and data types specific for Go are documented in [2]. The overal
SGF file format is documented in [3].

[1] https://www.red-bean.com/sgf/properties.html
[2] https://www.red-bean.com/sgf/go.html
[3] https://www.red-bean.com/sgf/sgf4.html


Overview
--------
The app uses the SgfcKit third-party library to load and save SGF files. To do
so it needs to convert the application-specific model data to/from the data
structures required/provided by SgfcKit.


SGF property handling
---------------------
Handled root properties
- FF
  - Used in the Archive view to load the SGF file and make corrections.
  - The property is evaluated by SGFC, not by the app.
- CA
  - Used in the Archive view to load the SGF file.
  - The property is evaluated by SGFC, not by the app.
- GM
  - Used in the Archive view by the app to filter out games that are not Go
    games.
- SZ
  - LoadGameCommand reads this property via SGFCGameInfo.
  - The property value is converted to enum GoBoardSize and used to construct
    the game.

Handled game info properties
- HA
  - This is a Go-specific property. The property value is the number of handicap
    stones, not the stones themselves.
  - LoadGameCommand reads this property via SGFCNode, from the node that is the
    Game Info node.
  - LoadGameCommand uses the property value to determine the number of setup
    stones that it expects in the AB property that must also be located in the
    Game Info node.
- KM
  - LoadGameCommand reads this via SGFCNode, from the node that is the Game Info
    node.
  - The property value is converted to a double value and stored in the GoGame
    property komi.
- AN, BR, BT, CP, DT, EV, GN, GC, ON, OT, PB, PC, PW, RE, RO, RU, SO, TM, US, WR, WT
  - These properties are currently displayed only on the Archive tab.

Handled setup, move, node/move annotation and markup properties
- Setup properties: AB, AW, AE, PL
  Move properties: B, W
  Node annotation properties: C, N, GB, GW, DM, UC, V, HO
  Move annotation properties: TE, DO, BM, IT
  Markup properties: CR, SQ, TR, MA, SL, AR, LN, LB, DD
  - LoadGameCommand reads these properties via SGFCNode, from all nodes in the
    game tree.
  - If any of these properties is found in a node, a new GoNode is created
    for that node.
    - Special handling for root node
      - If a move property is found in the root node, then that property and all
        other properties listed above that are also found in the root node are
        together split off into a separate new node.
      - If no move property is found in the root node, all other properties
        listed above that are found in the root node are stored in the root
        node.
    - Special handling for setup properties
      - May only appear in nodes that are located on each variation of the game
        tree before the first node that contains a move property. If a setup
        property is found in a later node, LoadGameCommand refuses to load the
        SGF file.
      - In the Game Info node, if there is also a HA property, the first <n>
        setup stones from the AB property are stored in the GoGame property
        handicapPoints. Any remaining setup points are then stored in the
        GoNodeSetup object.
      - If there is a HA property in the Game Info node with <n> greater than
        zero, no stone setup properties (AB, AW, AE) may appear in nodes before
        the Game Info node. If stone setup properties appear in nodes before the
        Game Info node, LoadGameCommand refuses to load the SGF file.
  - AB, AW, AE, PL: The property value is converted to GoNodeSetup, which is
    then attached to the GoNode.
  - B, W: The property value is converted to GoMove, which is then attached to
    the GoNode.
  - C, N, GB, GW, DM, UC, V, HO: The property value is converted to
    GoNodeAnnotation, which is then attached to the GoNode.
  - TE, DO, BM, IT: The property value is converted to enum GoMoveValuation and
    stored in the GoMove property goMoveValuation.
  - CR, SQ, TR, MA, SL, AR, LN, LB, DD: The property value is converted to
    GoNodeMarkup, which is then attached to the GoNode.
    - DD: The app currently does nothing with the value from this property, it
      merely reads and saves the data.

Unhandled properties
- Root properties
  - AP
  - ST
- Game info properties
  - All game info properties are handled.
- Setup properties
  - All setup properties are handled.
- Move properties
  - KO
  - MN
- Node annotation properties
  - All node annotation properties are handled.
- Move annotation properties
  - All move annotation properties are handled.
- Markup properties
  - All markup properties are handled.
- Timing properties
  - All timing properties are unhandled.
  - BL
  - OB
  - OW
  - WL
- Miscellaneous properties
  - All miscellaneous properties are unhandled.
  - FG
  - PM
  - VW
- Go-specific properties without a type
  - All Go-specific properties without a type are unhandled.
  - TB
  - TW


SGF node handling
-----------------
Loading an SGF file
- In general, nodes in an SGF file are preserved.
- There are some cases where SGFC splits nodes. Example: When it finds one or
  more setup properties (AB, AW or AE) and a move property in the same node,
  it splits the two into separate nodes, creating a node for the move property.
- When the app finds a move property in the root node, it creates a new node
  and places the property in the new node. Any annotation property or markup
  property also found in the root node in this case are also placed in the
  new node.
- The app skips empty nodes, or nodes that contain
  - Only unhandled properties,
  - Or only handled game info properties,
  - Or only handled root properties,
  - Or a combination of the three
Saving an SGF file
- On creating an SGF file, currently the app writes game info properties
  into the root node. This will change as soon as the app starts to support
  variations.
- On creating an SGF file, the app writes setup properties into a new node,
  just after the game info node. If no setup exists then no such node is
  created.
  - TODO xxx This special handling of setup will go away with variation support
  - It would be legal SGF to write setup information into the game info node.
- On creating an SGF file, the app writes all nodes after the root node as-is,
  just after the setup node.
