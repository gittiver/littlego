Purpose of this document
------------------------
This document contains design notes on a variety of subjects.


.xib design notes
-----------------
None. This project creates the entire UI programmatically and does not use any
.xib files.


UI elements design notes
------------------------
TableViewCell
- TableViewCellFactory creates a couple of table cell types that are not
  available from the UIKit
- For the cell type that has a slider, I did a bit of debugging/inspection of
  the default UITableViewCell and its subviews; following are the results
- Size of a UITableViewCell (from its frame rect) = 320x45
- In a cell with style UITableViewCellStyleValue1 and accessoryType
  UITableViewCellAccessoryNone
  - cell.contentView frame rect = 10/0, 300x43
  - cell.textLabel frame rect = 10/11, 161x21 (text is "Cross-hair distance")
  - cell.detailTextLabel frame rect = 280/11, 10x21 (text is "2")
- In a cell with style UITableViewCellStyleValue1 and accessoryType
  UITableViewCellAccessoryDisclosureIndicator
  - cell.contentView frame rect = 10/1, 280x43
  - cell.textLabel frame rect = 10/11, 46x21 (text is "Black")
  - cell.detailTextLabel frame rect = 163/11, 107x21 (text is "Human player")
  - the disclosure indicator button is a direct subview of the cell (i.e. it's
    not part of the content view, and it's not in the accessoryView) with
    frame rect = 280/1, 30x43


View layout
-----------
This project uses iOS' Auto Layout feature to arrange its views on the screen.

The WindowRootViewController class is the application window's root view
controller. It is responsible for selecting one of several alternative main
application view controllers and displaying it. The decision is based on the
"UI type" provided by LayoutManager, which in turn looks at the device type and
the screen dimensions.

The same main application view controller is used throughout the lifetime of the
app. The original plan to have different main application view controllers for
different interface orientations had to be abandoned, at least for the moment,
because it turned out to be unreasonably difficult to return to the same
position in the logical view controller hierarchy after the interface
orientation change.


View controller hierarchies
---------------------------
This section shows the view controller hierarchies required to display the
content of UIAreaPlay. Other areas are not depicted because their hierarchies
are much simpler to understand. If not noted otherwise, view controllers are
derived from UIViewController.

View controller hierarchy for UITypePhone:

    MainTabBarController : UITabBarController
    +-- PlayRootViewNavigationController : UINavigationController
        +-- PlayRootViewControllerPhoneAndPad : PlayRootViewController
            +-- Portrait orientation
            |   +-- StatusViewController (titleView of navigation bar of PlayRootViewNavigationController)
            |   |   +-- UILabel
            |   |   +-- UIActivityIndicatorView
            |   +-- BoardViewController
            |   |   +-- PanGestureController
            |   |   +-- TapGestureController
            |   |   +-- DoubleTapGestureController
            |   |   +-- TwoFingerTapGestureController
            |   |   +-- BoardAnimationController
            |   |   +-- BoardView
            |   +-- ButtonBoxController : UICollectionViewController
            |   |   +-- UICollectionView (board position navigation cells)
            |   +-- AnnotationViewController
            |   +-- BoardPositionCollectionViewController : UICollectionViewController
            |   |   +-- UICollectionView (BoardPositionCollectionViewCell cells)
            +-- Landscape orientation
                +-- SplitViewController
                    +-- LeftPaneViewController
                    |   +-- StatusViewController
                    |   |   +-- UILabel
                    |   |   +-- UIActivityIndicatorView
                    |   +-- BoardPositionCollectionViewController : UICollectionViewController
                    |       +-- UICollectionView (BoardPositionCollectionViewCell cells)
                    +-- RightPaneViewController
                        +-- AnnotationViewController
                        +-- ButtonBoxController : UICollectionViewController
                        |   +-- UICollectionView (board position navigation cells)
                        +-- BoardViewController
                        |    +-- PanGestureController
                        |    +-- TapGestureController
                        |    +-- DoubleTapGestureController
                        |    +-- TwoFingerTapGestureController
                        |    +-- BoardAnimationController
                        |    +-- BoardView
                        +-- ButtonBoxController : UICollectionViewController
                            +-- UICollectionView (game action cells)


View controller hierarchy for UITypePad:

    MainTabBarController : UITabBarController
    +-- PlayRootViewNavigationController : UINavigationController
        +-- PlayRootViewControllerPhoneAndPad : PlayRootViewController
            +-- Portrait orientation
            |   +-- StatusViewController (titleView of navigation bar of PlayRootViewNavigationController)
            |   |   +-- UILabel
            |   |   +-- UIActivityIndicatorView
            |   +-- BoardViewController
            |   |   +-- PanGestureController
            |   |   +-- TapGestureController
            |   |   +-- DoubleTapGestureController
            |   |   +-- TwoFingerTapGestureController
            |   |   +-- BoardAnimationController
            |   |   +-- BoardView
            |   +-- ButtonBoxController : UICollectionViewController
            |   |   +-- UICollectionView (board position navigation cells)
            |   +-- AnnotationViewController
            |   +-- BoardPositionCollectionViewController : UICollectionViewController
            |   |   +-- UICollectionView (BoardPositionCollectionViewCell cells)
            +-- Landscape orientation
                +-- SplitViewController
                    +-- LeftPaneViewController
                    |   +-- StatusViewController
                    |   |   +-- UILabel
                    |   |   +-- UIActivityIndicatorView
                    |   +-- BoardPositionCollectionViewController : UICollectionViewController
                    |       +-- UICollectionView (BoardPositionCollectionViewCell cells)
                    +-- RightPaneViewController
                        +-- AnnotationViewController
                        +-- ButtonBoxController : UICollectionViewController
                        |   +-- UICollectionView (board position navigation cells)
                        +-- BoardViewController
                        |    +-- PanGestureController
                        |    +-- TapGestureController
                        |    +-- DoubleTapGestureController
                        |    +-- TwoFingerTapGestureController
                        |    +-- BoardAnimationController
                        |    +-- BoardView
                        +-- ButtonBoxController : UICollectionViewController
                            +-- UICollectionView (game action cells)


View controller hierarchy for UITypePhonePortraitOnly:

    MainTabBarController : UITabBarController
    +-- PlayRootViewNavigationController : UINavigationController
        +-- PlayRootViewControllerPhonePortraitOnly : PlayRootViewController
            +-- StatusViewController (titleView of navigation bar of PlayRootViewNavigationController)
            |   +-- UILabel
            |   +-- UIActivityIndicatorView
            +-- BoardViewController
            |   +-- PanGestureController
            |   +-- TapGestureController
            |   +-- DoubleTapGestureController
            |   +-- TwoFingerTapGestureController
            |   +-- BoardAnimationController
            |   +-- BoardView
            +-- ButtonBoxController : UICollectionViewController
            |   +-- UICollectionView (board position navigation cells)
            |   +-- AnnotationViewController
            +-- BoardPositionCollectionViewController : UICollectionViewController
                +-- UICollectionView (BoardPositionCollectionViewCell cells)


Working with .sgf files
-----------------------
In older versions of the app .sgf files used to be loaded and saved by the
GTP engine. This meant that file names had to be transmitted over the GTP
protocol. GTP has limitations in what characters can be used in file names,
notably the space character is prohibited.

This section used to contain extensive information on how the app worked around
GTP's file naming limitation. The information is no longer here because it has
become obsolete now that the app uses SgfcKit to load and save .sgf files. This
placeholder is a reminder of the old days and that the obsolete information can
be retrieved from version control if it should ever be needed again.


Drawing the Go board
--------------------
Drawing the Go board is a relatively complex mechanism that consists of two
main parts:
- Tiling
- Layering

Tiling
- The Go board can be freely zoomed in (up to a maximum zoom scale) and out.
  Once the board is zoomed in, the visible part can be scrolled.
- To prevent excessive memory usage when the board is zoomed in, the board is
  split into rectangular sections called "tiles" (cf. the Tile protocol).
- Only those tiles that are currently visible are actually drawn (cf. the
  BoardTileView class).
- When the user scrolls, old tiles that are no longer visible are discarded and
  new tiles that have become visible are newly drawn. This CPU intensive process
  is managed by the BoardView class. To reduce CPU usage somewhat, BoardView
  reuses tile views instead of deallocating and recreating them. Usability tests
  have also shown that scrolling is noticeably smoother with tile reuse.
- Memory and CPU usage are opposing forces, and the tile size is the main
  balancing factor between these forces. Currently the app uses a hard-coded
  tile size that has been experimentally determined to strike an acceptable
  balance (details can be found in the "Research" document). Future versions of
  the app might use dynamically calculated tile sizes for optimized performance
  on different devices.

Layering
- The content of a tile is drawn in multiple CALayers that are stacked on top of
  each other.
- Separating the drawing of different board elements into different layers has
  the advantage that when an event occurs only those layers, or layer parts,
  that are actually affected by the event need to be redrawn. The drawback, of
  course, is that additional memory is required.
- To counteract memory usage, layers are dynamically added and removed depending
  on application events that require certain board elements to be displayed.

Layering and single-/multi-point drawing artifacts
- A lot of the drawing of a Go board revolves around drawing artifacts centered
  on an intersection, or point on the Go board.
- The Go board drawing space can therefore be thought of consisting of many
  small, adjacent boxes or cells, that are centered on the Go board's points.
- Most artifacts are drawn entirely within the boundaries of these point cells.
  These are single-point drawing artifacts. Examples:
  - Stones
  - Last move marker
  - Move number label
  - Markup symbols
- A few artifacts, however, are drawn spanning multiple point cells. These are
  multi-point drawing artifacts. Examples:
  - Grid lines
  - Cross-hair lines
  - Markup connections
  - Markup labels that are not letter or number markers
- Single-point and multi-point drawing artifacts should not be mixed within the
  same layer. The reason is that implementing a layer's drawing logic can be
  made very efficient as long as the layer only has to draw single-point
  artifacts, because single-point drawing artifacts CANNOT OVERLAP! If the same
  layer also has to draw multi-point drawing artifacts with unknown sizes, it
  can become difficult for the layer to know when some artifact needs to be
  drawn which of the other artifacts that it also manages it should not draw.
- The solution adopted whenever possible in this app is to create separate
  layers for drawing multi-point artifacts. The latest example here is
  LabelsLayerDelegate, which was split off from SymbolsLayerDelegate with the
  sole responsibility for drawing markup labels that are not letter or number
  markers. Although an increased memory footprint is the result, the tradeoffs
  are that the implementation of SymbolsLayerDelegate can remain significantly
  simpler, and also during a panning gesture there should be a CPU gain because
  the drawing output of LabelsLayerDelegate can be composited on top of the
  drawing output of SymbolsLayerDelegate, which should be a much simpler
  operation than redrawing large parts of the symbols layer on each change
  during a panning gesture.


Players & Profiles
------------------
Players and GTP engine profiles are conceptually separate entities. Every
computer players has a reference to one GTP engine profile. GTP engine profiles
are independent.

Some rules:
- At any given time there is one GTP engine profile that is active. The active
  profile's settings are used to configure Fuego.
- If a computer player is participating in a game (human vs. computer game,
  computer vs. computer game), the GTP engine profile referenced by that
  computer player is the active profile. In a computer vs. computer game the
  same computer player must play both the black side and the white side, because
  it is not possible to have different GTP engine profiles active at the same
  time.
- In a human vs. human game the app uses a special non-deleteable GTP engine
  profile. This is variously called either the "fallback" profile, or the
  "human vs. human games" profile.

In older versions of the app the user interface exposed Players and Profiles
as separate entitites and allowed the user to share a profile among multiple
players. The user could even assign the "human vs. human games" profile to
a computer player.

Newer versions of the app no longer allow this level of detail because all that
flexibility turned out to be more confusing than hepful to users. Instead the
user interface now lumps Players and Profiles together so that there is now
an effective 1:1 relatiionship between the two. Only the "human vs. human games"
profile can still be seen standalone, but the user interface sells this as a
"background" computer player.
