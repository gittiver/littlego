Purpose of this document
------------------------
This document contains the coding guidelines of this project.


Naming
------
- Class names start with an uppercase letter
- Method names start with a lowercase letter
- Member variables use the prefix "_" to distinguish them from variables
  that are local to a method (in a few places with older code, the prefix is
  still "m_")
- Setter/getter methods should be named after the member variable they
  encapsulate (e.g. getter = icon(), setter = setIcon:())
- Use @property in preference to member variables; letting the compiler
  synthesize the property for you guarantees that the naming is correct
- Find good names for variables, methods and classes; don't hesitate to use
  long names; never (!) use abbreviations; don't use i, j, k for loop variables


Indentation and formatting
--------------------------
- Spaces, no tabs
- 2 spaces per indentation level
- Opening/closing braces are placed on their own line
- No space is used to separate opening/closing paranthesis from the expression
  they surround
- Operators (e.g. "+" in string concatenations) are separated by spaces from
  their operands
- Pointers: No space between the type name and the asterisk ("*"); e.g.
  "NSString* foo", not "NSString *foo"
- Use braces liberally to improve readability, but don't hesitate to omit them
  in long if- or switch-clauses that use only one-line statements. Readability
  is the most important aspect here - sometimes the right use of braces can
  create a visual pattern that immediately tells the reader how the program
  flows.
- Method signatures should start in column 0 and use spaces etc. as in the
  following example. It's the style I like, although it deviates from Apple's
  style (which everybody else on the planet seems to have adopted).
    - (NSString*) foo:(NSString*)bar;


Code structure
--------------
- Only one variable declaration per line
- Only one statement per line; long statements (e.g. method invocations with
  many parameters) may span multiple lines
- Lines should not be longer than 80 characters; for comment lines this limit
  is much stricter than for lines of code
- Private properties of a class are declared in class extension which appears
  in the .m file
- Private methods of a class should not be declared to avoid unnecessary
  duplication of method signatures.
- Never EVER use side-effects, e.g.
  - Don't place ++/-- operators in the same line as an assignment
  - Don't test a condition and make an assignment at the same time


Properties
----------
- Consider making properties "readonly" in the public interface of a class, then
  redeclare them as "readwrite" in the private interface in the .m file
- Always declare a property's setter semantics, i.e. explicitly declare "assign"
  even though it is the default and could be omitted
- Use "nonatomic" unless the property really needs to be atomic


Other stuff
-----------
- Everything should be documented with Doxygen documentation blocks; exceptions
  are possible but should remain rare
- Use property chaining sparingly. When interfacing with SgfcKit property
  chaining like this
    SGFCReal someRealValue = sgfProperty.propertyValue.toSingleValue.toRealValue.realValue;
  is acceptable because SgfcKit/libsgfc++/SGFC can be relied upon to contain
  enough pre-processing checks and sanitizing that a property value matches the
  requirements of the property.
