Purpose of this document
------------------------
This document lists the steps needed to make a project release.


Before the release
------------------
- Create a release branch. All remaining work will be done in this branch.
  git checkout -b release-0.9.0 develop
- Run Xcode's analyze tool for both the simulator and a device target and fix
  all problems that are reported
- Make sure that the issues in the bugtracker are up to date
- Analyze any crash reports that are still outstanding
  - Crashlytics dashboard
  - Xcode organizer, both on the "Crashes" and "Energy" tabs
- Respond to any outstanding user comments in the App Store
- If necessary, add an upgrade method to UserDefaultsUpdater
- Make sure that the bug report format version and/or the NSCoding version are
  updated if something relevant has changed since the last release. If the
  NSCoding version changes, the bug report format version MUST also be changed.
  Vice versa this is not always the case.
- If a new Xcode and/or iOS version were used to build the project
  - Make sure that the Xcode and iOS base SDK versions are updated in the
    following files:
    - README.developer
    - NOTES.Build
  - Make sure to read the Xcode release notes
- If a new deployment target was used to build the project, update the following
  files (search for the old version)
  - README.md
  - NOTES.Build
  - NOTES.Marketing
  - index.html on the gh-ages branch
- If 3rd party software has been updated
  - Make sure that the third party software version numbers in About.html are
    up to date (including the fuego-on-ios commit ID)
  - Make sure that all license files and the content of the NOTICE file are
    up to date
  - Make sure to read the relevant release notes
- Make sure that no debugging stuff has been forgotten in the code (e.g. search
  for "xxx")
- Mention new contributions in Credits.html and the AUTHORS file
- Update the ChangeLog
  - The main source for this are the issues on the bug tracker
  - The git commit log may also have useful information
  - Also add notes about changes to the user defaults, especially if some of
    the user's preferences are clobbered by UserDefaultsUpdater
- Replace the "Changes in this release" section of README.md with a collection
  of the most important changes from the ChangeLog.
- Update the "Troubleshooting" section in the MANUAL file if there are any new
  "known bugs"
- Make sure that the version number is up to date in the following files:
  - README.md
  - Info.plist (can be changed in Xcode's summary page for the main target)
- Increase CFBundleVersion in Info.plist (Xcode also makes this available on
  the summary page of the project, as the field labelled "Build")
- Make sure that the copyright year is up to date in the following files (e.g.
  2009-2011 instead of 2009-2010):
  - Info.plist
  - NOTICE
  - All source files that were touched since the last release. For instance,
    to list all files that were touched since the release 1.6.0 and were not
    updated to the current year 2022:
    git diff --name-only 1.6.0 | egrep "^(src|test|uitest)" | sort | uniq | xargs grep "// Copyright" 2>/dev/null | grep -v 2022 | cut -d":" -f1
- Remove the build directory to make sure that subsequent test and distribution
  builds are clean.
    rm -rf DerivedData
  As a side-effect, this also guarantees that the build date provided by
  VersionInfoUtilities is up to date. Last but not least, this is is also
  important after resources have changed, because Xcode has been known to leave
  old resource files in the build folder, which could lead to unexpected
  results.
- In Xcode select the "Little Go AdHoc Distribution" scheme (because this uses
  the Release configuration), then make a build for the simulator and for all
  target devices. If there are any warnings, fix them.
- Run the ad-hoc distribution build through the tests described in the TESTING
  document. If the device is physically available you can copy the build to the
  device simply by selecting Product > Run in Xcode - in fact the same procedure
  as when you run a Debug build on the device.
  - In earlier years it used to be necessary to create an archive (see section
    "Create an archive") and from that an ad-hoc distribution (see section
    "Make an ad-hoc distribution (beta release)"), but I haven't used that
    procedure in years, so it may be obsolete. Maybe the more modern approach
    is the TestFlight service from Apple, but I never had to use this so far.
- Commit final changes (check with "git status" that nothing was forgotten).
  In practice I tend to wait with the final "tidy up" commit, which consists of
  documentation changes only, until Apple has completed the review process
  (see section "Make the release" below).
- Select the "Little Go AppStore Distribution" scheme, then follow the
  instructions in the "Create an archive" section below to create an archive,
  then follow the instructions in the "Make an AppStore distribution" section
  below to upload the archived build to App Store Connect.


Create an archive
-----------------
- In the toolbar's scheme selector, activate one of the two schemes
    Little Go AdHoc Distribution
      or
    Little Go AppStore Distribution
  Which one depends on what you want to do with the archive.
- In both cases, select the "Generic iOS Device" destination
- From the menu, select Product > Archive
- The application is now built using either the "Distribute_AdHoc" or the
  "Distribute_AppStore" build configuration
- After the build succeeds it is archived, then the "Organizer" window opens to
  display the archive that was just created
- Give it a useful name, e.g. "Little Go 1.7.0 AppStore Distribution"


Make an ad-hoc distribution (beta release)
------------------------------------------
- In Xcode in the Organizer window, select the archived build, then click the
  "Distribute..." button, followed by "Save for Enterprise or Ad-Hoc Deployment"
  on the next screen
- Select a code-signing identity (the default should be OK)
- Click the "Next" button which will pop up a save dialog
- Click the checkbox "Save for Enterprise Distribution"; this opens a pane that
  lets you fill in a few things about how you intend to distribute the build
- Most important is that what you enter in the "Application URL" field matches
  exactly the URL of the .ipa file as it is going to be available for download
- Sensible values are
  - Application URL = https://www.herzbube.ch/software/littlego/0.7/littlego-0.7.ipa
  - Title = Little Go 0.7 Beta Test
- You must also specify a save location and a name. This step creates both a
  .plist and an .ipa file, where the specified name serves as the base name for
  both files. Make sure to specify the same name as in the URL above (but
  without the .ipa extension; e.g. "littlego-0.7").
- Make sure to get the "Ad Hoc Distribution Provisioning Profile" from the
  iOS Provisioning Portal. This profile is stored in a .mobileprovision file.
- Upload the .plist, .ipa and .mobileprovision files to the server from where
  testers can download it
- Create an index.html at the download location that provides the necessary
  download links


Make an AppStore distribution (production release)
--------------------------------------------------
- Log in to App Store Connect
- Navigate to the main screen of the app
- Add the new application version by clicking the button labelled
  "(+) Version or platform"
- Make all the preparations required for the submission. What to do and how to
  do it is a moving target - Apple keeps changing the App Store Connect site,
  so it doesn't make much sense to describe things here in detail. You certainly
  need to fill in the "What's New in This Version" field (the necessary
  information can be taken from the ChangeLog), and specify whether you want
  the release the app manually or automatically after the review process has
  completed. You may also need to update the copyright year, and provide new
  screenshots if new devices were introduced by Apple, or if the app's UI layout
  has changed.
- When everything is ready, switch back to Xcode. In the Organizer window,
  select the archived build (instructions how to create an archive can be found
  further up in this document), then click the "Distribute app" button.
- Step through the wizard that pops up.
  - Page 1: Select "App Store Connect" as the method of distribution.
  - Page 2: Select "Upload" as destination.
  - Page 3: Select all distribution option checkboxes. These are:
    - Include bitcode for iOS content
    - Upload your app's symbols => This makes symbolicated crash logs available
      in Xcode.
    - Manage Version and Build Number => This replaces the version and build
      number you manually entered on App Store Connect with the real values
      taken from the archived build.
  - Page 4: Select "Automatically manage signing". This takes care of the number
    one problem I had in the past when releasing new versions of the app:
    Renewing certificates and provisioning profiles.
    - Historic note: In the past it was necessary to select a provisioning
      profile to use. The provisioning profile determines the code-signing
      identity that Xcode will use.
  - Page 5: Review the content of the "Little Go.ipa" bundle. If as usual more
    than one year has passed since the last release, then you can see here from
    the updated expiration dates that the certificate and provisioning profile
    have been automatically renewed.
- Click "Upload" on the last wizard page. The archive is now being validated and
  uploaded. This can take several minutes.
- If uploading fails and Xcode does not provide any sensible error message, try
  exporting the archive from Xcode to an .ipa bundle, then upload the .ipa using
  Application Loader. Application Loader usually provides a pretty decent error
  message that should let you identify and fix the issue. Sometimes
  Application Loader may even succeed where Xcode fails (this happened e.g. for
  the 1.3.0 and 1.3.1 releases of Little Go). Here's the detailed procedure:
  - In the Xcode Organizer, select the archived build and click "Export"
  - Select "Save for iOS App Store Deployment"
  - Select a provisioning profile
  - Click "Export"
  - Select the destination folder where you want to save the exported build.
    I usually save these builds in a "dist" subfolder of the Little Go main
    project folder.
  - The file that is created is an .ipa file
  - Launch Application Loader, either from the Xcode menu
    (Xcode > Open Developer Tool) or via Spotlight. If you use Spotlight and
    have several Xcode versions installed, make sure you get the
    Application Loader from the correct Xcode bundle.
  - Select the symbol that will start the process for App Store submission
  - Navigate to the .ipa bundle that you previously exported, then select the
    file
  - Click "Next". The upload process should be starting now. The process takes a
    while, in the meantime you can click on the "Activity" button to see what
    Application Loader is doing.
- After the upload has finished, switch back to App Store Connect. Scroll down
  to the section titled "Build" and click the "Select a build" button to select
  the build you just uploaded. If no build exists yet to select from, the
  "Select a build" button is not shown. You may need to wait 15 minutes or
  more until the uploaded build has finished processing and becomes available
  in App Store Connect - in fact you should get an email confirmation from
  App Store Connect when processing the build has finished. If the build still
  does not appear on the website you may need to log out and log back in.
- When selecting a build you may need to answer a couple of questions, usually
  about export regulations. This is also a moving target, in the past these
  questions were asked later, when the app was submitted for review.
- Click "Add for review" at the top of the page.
- Confirm the submission. The app status should now be "Waiting for Review".
- Wait for Apple to review the submission.


Make the release
----------------
- After Apple has completed the review process, the release can now be viewed
  as official and the remaining steps can be performed
- Download Bitcode dSYMs into the local archive
  - When a Bitcode enabled build is uploaded to App Store Connect, Apple
    generates several new dSYMs that are not available locally.
  - The dSYMs can be downloaded in Xcode's Organizer window: Select the archived
    build, then click the button labelled "Download Debug Symbols". To make
    sure that the download was successful, right-click the archived build, then
    select "Show in Finder" from the context menu. Open the .xcarchive folder
    (right-click and select "Show Package Contents") and navigate to the "dSYMs"
    folder. Here you should now see one dSYM named after the app (i.e.
    Little Go.app.dSYM) and several dSYMs named with a UUID.
  - Alternatively you can manually download the Bitcode dSYMs from the App Store
    Connect website: Navigate to the app's main page, select "Activity" and the
    build in question, then click the "Download dSYM" link. This downloads a
    single .zip archive appDsyms.zip that contains all dSYMs. Extract the
    archive then copy the contents into the "dSYMs" folder within the .xcarchive
    folder of the archived build.
- Backup the archive that was uploaded to the App Store. In the previous step
  the archive was updated with downloaded Bitcode dSYMs. A backup is important
  because that archive contains the symbols that are required to symbolicate any
  crash reports. Usually you will rely on Crashlytics for this, but you never
  know. To find the .xcarchive bundle to backup, right-click on the archived
  build in the Organizer window, then select "Show in Finder".
- Merge all changes in the release branch into develop
  git checkout develop
  git merge release-0.9.0
- Merge all changes in the release branch into master
  git checkout master
  git merge develop
- Tag and sign the release
  git tag -s -m "tagging release x.y" x.y <commit hash>
- Update the GitHub repository
  git push
  git push --tags
- Remove the release branch, both locally and, if it was pushed, on GitHub
- Close tickets that are not yet closed in the issue tracker, then close the
  milestone
- Create a new release on GitHub that references the git tag. Copy ChangeLog
  content into the release description.
- On the Crashlytics website, make sure that the new app version is enabled and
  the previous app version is disabled.
- Upload the Bitcode dSYMs that you downloaded in a previous step (see above) to
  the Crashlytics website. Note that the regular dSYM has already been uploaded
  by a build script in the Xcode project.
- Update website littlego.herzbube.ch
- Release the new version to the App Store
- Advertise the release (check out the NOTES.Marketing file)
