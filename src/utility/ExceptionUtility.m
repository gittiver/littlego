// -----------------------------------------------------------------------------
// Copyright 2015-2024 Patrick NÃ¤f (herzbube@herzbube.ch)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------


// Project includes
#import "ExceptionUtility.h"


@implementation ExceptionUtility

// -----------------------------------------------------------------------------
/// @brief Throws an NSInvalidArgumentException that uses a generic message
/// containing the specified invalid @a uiType.
// -----------------------------------------------------------------------------
+ (void) throwInvalidUIType:(enum UIType)uiType
{
  [ExceptionUtility throwInvalidArgumentExceptionWithFormat:@"Invalid UI type %d"
                                              argumentValue:uiType];
}

// -----------------------------------------------------------------------------
/// @brief Throws an NSInvalidArgumentException that uses as its message a
/// string generated by invoking the NSString class method stringWithFormat:()
/// and passing @a format and @a argumentValue as its parameters.
// -----------------------------------------------------------------------------
+ (void) throwInvalidArgumentExceptionWithFormat:(NSString*)format
                                   argumentValue:(int)argumentValue
{
  NSString* errorMessage = [NSString stringWithFormat:format, argumentValue];
  [self throwInvalidArgumentExceptionWithErrorMessage:errorMessage];
}

// -----------------------------------------------------------------------------
/// @brief Throws an NSInvalidArgumentException that uses @a errorMessage as
/// its message.
// -----------------------------------------------------------------------------
+ (void) throwInvalidArgumentExceptionWithErrorMessage:(NSString*)errorMessage
{
  DDLogError(@"%@", errorMessage);
  NSException* exception = [NSException exceptionWithName:NSInvalidArgumentException
                                                   reason:errorMessage
                                                 userInfo:nil];
  @throw exception;
}

// -----------------------------------------------------------------------------
/// @brief Throws an NSInternalInconsistencyException that uses as its message a
/// string generated by invoking the NSString class method stringWithFormat:()
/// and passing @a format and @a argumentValue as its parameters.
// -----------------------------------------------------------------------------
+ (void) throwInternalInconsistencyExceptionWithFormat:(NSString*)format
                                         argumentValue:(int)argumentValue
{
  NSString* errorMessage = [NSString stringWithFormat:format, argumentValue];
  [self throwInternalInconsistencyExceptionWithErrorMessage:errorMessage];
}

// -----------------------------------------------------------------------------
/// @brief Throws an NSInternalInconsistencyException that uses @a errorMessage
/// as its message.
// -----------------------------------------------------------------------------
+ (void) throwInternalInconsistencyExceptionWithErrorMessage:(NSString*)errorMessage
{
  DDLogError(@"%@", errorMessage);
  NSException* exception = [NSException exceptionWithName:NSInternalInconsistencyException
                                                   reason:errorMessage
                                                 userInfo:nil];
  @throw exception;
}

// -----------------------------------------------------------------------------
/// @brief Throws an exception with name "AbstractMethodException".
///
/// Since it's not possible in Objective-C to mark a base class method as
/// "abstract", the base class default implementation can at least throw this
/// exception.
// -----------------------------------------------------------------------------
+ (void) throwAbstractMethodException
{
  NSException* exception = [NSException exceptionWithName:@"AbstractMethodException"
                                                   reason:@""
                                                 userInfo:nil];
  @throw exception;
}

// -----------------------------------------------------------------------------
/// @brief Throws an exception with name "NotImplementedException".
// -----------------------------------------------------------------------------
+ (void) throwNotImplementedException
{
  NSException* exception = [NSException exceptionWithName:@"NotImplementedException"
                                                   reason:@""
                                                 userInfo:nil];
  @throw exception;
}

@end
